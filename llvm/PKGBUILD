pkgbase='llvm'
pkgname=('compiler-rt' 'libunwind' 'libunwind-dev' 'libcxxabi' 'libcxxabi-dev' 'libcxx' 'libcxx-dev' 'libclang' 'libclang-dev' 'clang' 'lld-dev' 'lld' 'llvm-lib' 'llvm-dev' 'llvm')
pkgver=7.0.0.r159761.ga4e44968
pkgrel=1
arch=('x86_64')
url='https://llvm.org/'
license=('custom:University of Illinois')
makedepends=('libffi' 'binutils')
source=('git+https://git.llvm.org/git/llvm.git'
        'git+https://git.llvm.org/git/clang.git'
        'git+https://git.llvm.org/git/compiler-rt.git'
        'git+https://git.llvm.org/git/libunwind.git'
        'git+https://git.llvm.org/git/libcxx.git'
        'git+https://git.llvm.org/git/libcxxabi.git'
        'git+https://git.llvm.org/git/lld.git'
        'musl.patch')
sha256sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            '4cb1bb13f5da4d2e3687a036fcb9595eb234d3561035d8a1b3736f3634fe14dc')

pkgver() {
  cd "${pkgbase}"
  
  echo $(awk -F 'MAJOR |MINOR |PATCH |)' \
            'BEGIN { ORS="." ; i=0 } \
             /set\(LLVM_VERSION_/ { print $2 ; i++ ; if (i==2) ORS="" } \
             END { print "\n" }' \
        CMakeLists.txt).r$(git rev-list --count master).g$(git rev-parse HEAD | cut -c1-8)
}

prepare() {
  patch -Np1 -i "${srcdir}/musl.patch"
  
  cd "${srcdir}/${pkgbase}"
  
  ln -sf "${srcdir}/clang" "${srcdir}/${pkgbase}/tools/"
  ln -sf "${srcdir}/lld" "${srcdir}/${pkgbase}/tools/"
  ln -sf "${srcdir}/compiler-rt" "${srcdir}/${pkgbase}/projects/"
  ln -sf "${srcdir}/libunwind" "${srcdir}/${pkgbase}/projects/"
  ln -sf "${srcdir}/libcxx" "${srcdir}/${pkgbase}/projects/"
  ln -sf "${srcdir}/libcxxabi" "${srcdir}/${pkgbase}/projects/"
}

build() {
  if [ ! -d "${srcdir}/build" ]; then
    mkdir "${srcdir}/build"
  fi
  
  cd "${srcdir}/build"
  
  CFLAGS=${CFLAGS//'-flto=thin'/}
  CXXFLAGS=${CXXFLAGS//'-flto=thin'/}
  LDFLAGS=${LDFLAGS//'-flto=thin'/}
  
  cmake -G 'Ninja' \
        -DCMAKE_BUILD_TYPE='Release' \
        -DCMAKE_INSTALL_PREFIX='/usr' \
        -DCMAKE_C_COMPILER=clang \
        -DCMAKE_CXX_COMPILER=clang++ \
        \
        -DLLVM_DEFAULT_TARGET_TRIPLE=$CHOST \
        -DLLVM_ENABLE_LIBCXX=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON \
        -DLLVM_ENABLE_BACKTRACES=OFF \
        -DLLVM_ENABLE_LLD=ON \
        -DLLVM_INSTALL_UTILS=ON \
        -DLLVM_TARGETS_TO_BUILD=X86 \
        \
        -DCLANG_DEFAULT_CXX_STDLIB='libc++' \
        -DCLANG_DEFAULT_RTLIB='compiler-rt' \
        -DCLANG_PLUGIN_SUPPORT=OFF \
        \
        -DLIBCXX_CXX_ABI='libcxxabi' \
        -DLIBCXX_CXX_ABI_INCLUDE_PATHS="${srcdir}/libcxxabi/include" \
        -DLIBCXX_HAS_MUSL_LIBC=ON \
        -DLIBCXX_USE_COMPILER_RT=ON \
        \
        -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
        -DLIBCXXABI_USE_COMPILER_RT=ON \
        \
        -DLIBUNWIND_USE_COMPILER_RT=ON \
        \
        -DSANITIZER_CXX_ABI='libcxxabi' \
        -DSANITIZER_USE_COMPILER_RT=ON \
        -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
        -DCOMPILER_RT_BUILD_XRAY=OFF \
        -DCOMPILER_RT_INCLUDE_TESTS=OFF \
        \
        "${srcdir}/llvm"
  
  ninja
}

package(){
  cd "${srcdir}/build"
  
  sed -i '/clang\/cmake_install.cmake/d' "tools/cmake_install.cmake"
  sed -i '/lld\/cmake_install.cmake/d' "tools/cmake_install.cmake"
  
  sed -i '/compiler-rt\/cmake_install.cmake/d' "projects/cmake_install.cmake"
  sed -i '/libcxxabi\/cmake_install.cmake/d' "projects/cmake_install.cmake"
  sed -i '/libcxx\/cmake_install.cmake/d' "projects/cmake_install.cmake"
  sed -i '/libunwind\/cmake_install.cmake/d' "projects/cmake_install.cmake"
}

package_compiler-rt() {
  pkgdesc='LLVM compiler-rt runtime libraries'
  
  cd "${srcdir}/build"
  
  DESTDIR="${pkgdir}" ninja projects/compiler-rt/install
}

package_libunwind(){
  depends=('musl')
  
  cd "${srcdir}/build"
  
  package-init
  
  DESTDIR="${tmpdir}" ninja projects/libunwind/install
  
  package-lib
}

package_libunwind-dev() {
  depends=('libunwind')
  
  package-base
}

package_libcxxabi(){
  depends=('musl' 'libunwind')
  
  cd "${srcdir}/build"
  
  package-init
  
  DESTDIR="${tmpdir}" ninja projects/libcxxabi/install
  
  package-lib
}

package_libcxxabi-dev() {
  depends=('libcxxabi' 'libunwind-dev')
  
  package-base
}

package_libcxx() {
  depends=('musl' 'libunwind' 'libcxxabi')
  
  cd "${srcdir}/build"
  
  package-init
  
  DESTDIR="${tmpdir}" ninja projects/libcxx/install
  
  package-lib
}

package_libcxx-dev() {
  depends=('libcxx' 'libcxxabi-dev')
  
  package-base
}

package_libclang() {
  depends=('musl' 'libcxx' 'libcxxabi' 'llvm-lib')
  
  cd "${srcdir}/build"
  
  package-init
  
  DESTDIR="${tmpdir}" ninja tools/clang/install
  
  package-lib
}

package_libclang-dev() {
  depends=('libclang')
  
  package-dev
}

package_clang() {
  depends=('libclang' 'crt' 'musl-dev' 'compiler-rt' 'libunwind-dev' 'libcxxabi-dev' 'libcxx-dev' 'lld')
  groups=('base-devel')
  
  package-base
}

package_lld-dev() {
  depends=('lld')
  
  cd "${srcdir}/build"
  
  package-init
  
  DESTDIR="${tmpdir}" ninja tools/lld/install
  
  package-dev
}

package_lld() {
  depends=('musl' 'libcxxabi' 'libcxx' 'llvm-lib')
  
  package-base
  
  ln -s lld "${pkgdir}/usr/bin/ld"
}

package_llvm-lib() {
  depends=('musl' 'libunwind' 'libcxxabi' 'libcxx' 'zlib')
  
  cd "${srcdir}/build"
  
  package-init
  
  DESTDIR="${tmpdir}" ninja install
  
  package-lib
  
  mv ${tmpdir}/usr/lib/libLLVM-*.so "${pkgdir}/usr/lib/"
}

package_llvm-dev() {
  depends=('llvm')
  
  package-dev
}

package_llvm() {
  depends=('musl' 'libunwind' 'libcxxabi' 'libcxx' 'llvm-lib')
  
  package-base
}
